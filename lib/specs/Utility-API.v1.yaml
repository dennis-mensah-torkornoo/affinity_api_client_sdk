openapi: 3.0.0
info:
  title: Utility-API.v1
  version: '1.0'
  description: Utility API
servers:
  - url: 'https://api.affinitylabstest.com/{basePath}'
    variables:
      basePath:
        default: /utility
paths:
  /client/list-id-documents:
    get:
      summary: Get ID document types
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
              examples:
                example:
                  value:
                    - id: 1
                      type: Passport
                    - id: 2
                      type: Drivers License
                    - id: 3
                      type: Voters ID
        '500':
          description: Internal Server Error
      operationId: listIdDocuments
      description: List ID Document types
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/list-id-documents'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  /client/list-occupations:
    get:
      summary: Get all occupations
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                    occupation:
                      type: string
              examples:
                example:
                  value:
                    - id: 1
                      occupation: Trader
                    - id: 2
                      occupation: Driver
                    - id: 3
                      occupation: Civil Servant
        '500':
          description: Internal Server Error
      operationId: listOccupation
      description: List Occupations
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/list-occupations'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  /client/uploads:
    post:
      summary: Upload customer document
      operationId: UploadDocuments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  enum:
                    - SELFIE
                    - PROFILE_PICTURE
                    - DOCUMENT
                    - ICON
                file:
                  type: string
                  format: binary
              required:
                - documentType
                - file
        description: ''
      parameters: []
      description: Upload customer documents
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/uploads'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: POST
       
        type: http_proxy
  '/client/uploads/{documentId}':
    parameters:
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Get document by document ID
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-uploads-documentId
      description: Retrieve a document by Document ID
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/uploads/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.documentId: method.request.path.documentId
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
    delete:
      summary: Delete document by ID
      operationId: deleteClientDocumentById
      responses:
        '200':
          description: OK
      description: Delete document by Document ID
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/uploads/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.documentId: method.request.path.documentId
        passthroughBehavior: when_no_match
        httpMethod: DELETE
       
        type: http_proxy
  /client/transaction-categories:
    get:
      summary: Get all transaction categories
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    category:
                      type: string
              examples:
                example-1:
                  value:
                    - id: 593feaec-8fcd-11ea-8e27-6145499c8af4
                      category: Bank Transfer
      operationId: getTransactionCategories
      description: Retrieve all Transaction Categories
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/transaction-categories'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  '/client/transaction-categories/{categoryId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    get:
      summary: Get transaction category by ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategory'
              examples:
                example-1:
                  value:
                    id: e50874da-a745-11ea-9575-35db4759d9be
                    category: SEND-MONEY
                    image: 'https://affinitytestuploads.s3.eu-west-1.amazonaws.com/ICONS/download.png'
        '404':
          description: Not Found
      operationId: getTransactionCategory
      description: Retrieve a Transaction Category
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/transaction-categories/{categoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.categoryId: method.request.path.categoryId
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  /client/payment-methods:
    get:
      summary: Get all payment methods
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    payment_method:
                      type: string
              examples:
                example-1:
                  value:
                    - id: 7c53f21e-93a3-11ea-855e-bd323a01c5b3
                      payment_method: MOMO
      operationId: getPaymentMethods
      description: Retrieve all payment methods
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/payment-methods'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
    parameters: []
  '/client/payment-methods/{paymentMethodId}':
    parameters:
      - schema:
          type: string
        name: paymentMethodId
        in: path
        required: true
    get:
      summary: Get payment method by ID
      tags: []
      responses:
        '200':
          description: OK
      operationId: gePaymentMethod
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/payment-methods/{paymentMethodId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.paymentMethodId: method.request.path.paymentMethodId
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  /client/occupations:
    post:
      summary: Create occupation
      operationId: addOccupation
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  occupation:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                occupation:
                  type: string
              required:
                - occupation
        description: ''
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/occupations'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: POST
       
        type: http_proxy
      description: Create an occupation
  /client/generate-jwt:
    post:
      summary: json with user_token
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
              examples:
                example-1:
                  value:
                    jwt: laeojowoawljwoijworjwojwaohrwheoh
      operationId: post-generate-jwt
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/generate-jwt'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: POST
       
        type: http_proxy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_token:
                  type: string
            examples:
              example-1:
                value:
                  user_token: 27216e91-c1cd-412b-9482-ca5c7ce64eac
          application/javascript:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              type: object
              properties: {}
          text/plain:
            schema:
              type: object
              properties: {}
          application/EDI-X12:
            schema:
              type: object
              properties: {}
          application/EDIFACT:
            schema:
              type: object
              properties: {}
        description: ''
  /client/banks:
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    get:
      summary: Get Banks
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bank'
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: listBanks
      description: Retrieve a list of Banks  in Ghana
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/banks'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  '/client/banks/{bankId}':
    parameters:
      - schema:
          type: string
        name: bankId
        in: path
        required: true
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    get:
      summary: Get bank by bankID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bank'
      operationId: getBank
      description: Get details of a bank by bankID
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/banks/{bankId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.bankId: method.request.path.bankId
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  /client/hubs:
    get:
      summary: Get all Hubs
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hub'
      operationId: getAllHubs
      description: Get A list of all hubs
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/hubs'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
    parameters: []
  '/client/hubs/{hubId}':
    parameters:
      - schema:
          type: string
        name: hubId
        in: path
        required: true
    get:
      summary: Get hub by hub ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
      operationId: getHub
      description: Get details of a hub
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/hubs/{hubId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.hubId: method.request.path.hubId
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
  /client/faqs:
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faq'
      operationId: getFaqs
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/faqs'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.querystring.search: method.request.querystring.search
        httpMethod: GET
       
        type: http_proxy
      parameters:
        - schema:
            type: string
          in: query
          name: search
  '/client/faqs/{faqId}':
    parameters:
      - schema:
          type: string
        name: faqId
        in: path
        required: true
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    get:
      summary: GET FAQ
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faq'
      operationId: GetFaqbyId
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/faqs/{faqId}'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.path.faqId: method.request.path.faqId
        httpMethod: GET
       
        type: http_proxy
  /client/faq-categories:
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FaqCategory'
      operationId: getFaqCategories
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/faq-categories'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: POST
       
        type: http_proxy
  /client/get-file-url:
    post:
      summary: ''
      operationId: clientGetFIleUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fileKey:
                  type: string
        description: ''
      description: Retrieve signed url of a file using file key
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/client/get-file-url'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: POST
       
        type: http_proxy
  /time:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: string
              examples:
                example-1:
                  value:
                    time: '2021-11-19T14:59:52.276Z'
      operationId: getUtcTime
      description: Get current UTC time
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.albUrl}/utility/time'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        httpMethod: GET
       
        type: http_proxy
    parameters: []
components:
  schemas:
    Error:
      title: Error
      type: object
      properties:
        errorCode:
          type: integer
        errorMsg:
          type: string
    TransactionCategory:
      title: TransactionCategory
      type: object
      x-examples:
        example-1:
          id: e50874da-a745-11ea-9575-35db4759d9be
          category: SEND-MONEY
          image: 'https://affinitytestuploads.s3.eu-west-1.amazonaws.com/ICONS/download.png'
      properties:
        id:
          type: string
        category:
          type: string
        image:
          type: string
    Bank:
      title: Bank
      type: object
      description: ''
      properties:
        id:
          type: string
        name:
          type: string
        imageId:
          type: string
        address:
          type: string
        email:
          type: string
        website:
          type: string
        phoneNumber:
          type: string
        serviceCode:
          type: string
        active:
          type: boolean
        sortCode:
          type: string
        image:
          type: object
          properties:
            id:
              type: string
            url:
              type: string
            key:
              type: string
      required:
        - name
    Hub:
      title: Hub
      type: object
      x-examples:
        example-1: {}
      properties:
        id:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        longitude:
          type: string
        latitude:
          type: string
        location:
          type: string
        code:
          type: string
        ghPostGps:
          type: string
      required:
        - name
        - phoneNumber
        - longitude
        - latitude
        - ghPostGps
    Faq:
      description: ''
      type: object
      properties:
        id:
          type: number
        question:
          type: string
          minLength: 1
        answer:
          type: string
          minLength: 1
        categoryId:
          type: number
        dateCreated:
          type: string
        lastUpdated:
          type: string
      required:
        - question
        - answer
        - categoryId
    FaqCategory:
      description: ''
      type: object
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        icon:
          type: string
      required:
        - name
    UploadResponse:
      title: UploadResponse
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        key:
          type: string
  securitySchemes:
    api_key:
      name: x-api-key
      type: apiKey
      in: header
